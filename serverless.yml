---
service: bow
frameworkVersion: '2'

plugins:
  - serverless-deployment-bucket
  - serverless-prune-plugin
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-apigw-binary

package:
  exclude:
    - .dynamodb/**
    - .dynamodb-data/**
    - .envrc
    - .git/**
    - .gitignore
    - .mypy_cache/
    - .venv/
    - node_modules/**
    - package.json
    - poetry.lock
    - pyproject.toml
    - scripts/
    - serverless.yml
    - yarn.lock

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'local'}
  region: ${ opt:region, 'ap-northeast-1' }
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-sls-deploy
    serverSideEncryption: AES256
  logRetentionInDays: 30
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ":"
          - - arn:aws:dynamodb
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - table/${self:service}-${self:provider.stage}-*
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - !Sub "${ImageBucket.Arn}"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - !Sub "${ImageBucket.Arn}/*"

custom:
  prune:
    automatic: true
    number: 3
  pythonRequirements:
    dockerizePip: false
    usePoetry: true
  apigwBinary:
    types:
      - multipart/form-data
  dynamodb:
    stages:
      - local
    start:
      dbPath: ./.dynamodb-data/
      migrate: false
      seed: false

functions:
  api:
    handler: app.api.main.handler
    name: ${self:service}-${self:provider.stage}-api
    environment:
      TABLE_PREFIX: ${self:service}-${self:provider.stage}
      IMAGE_BUCKET: ${self:service}-${self:provider.stage}-image
    events:
      - http:
          path: /{path+}
          method: any
          private: false
          cors: true

resources:
  Resources:
    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-image
    OwnerTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${self:provider.stage}-owner
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    DogTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${self:provider.stage}-dog
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: owner_id
            AttributeType: S
          - AttributeName: dog_id
            AttributeType: S
        KeySchema:
          - AttributeName: owner_id
            KeyType: HASH
          - AttributeName: dog_id
            KeyType: RANGE


